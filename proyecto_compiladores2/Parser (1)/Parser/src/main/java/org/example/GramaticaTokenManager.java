/* GramaticaTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. GramaticaTokenManager.java */
package org.example;

/** Token Manager. */
@SuppressWarnings("unused")public class GramaticaTokenManager implements GramaticaConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffdfffffff8000L) != 0L || (active1 & 0x1f9effL) != 0L)
         {
            jjmatchedKind = 123;
            return 1;
         }
         if ((active0 & 0x80L) != 0L)
            return 6;
         if ((active0 & 0x200000006000L) != 0L || (active1 & 0x6100L) != 0L)
            return 1;
         return -1;
      case 1:
         if ((active0 & 0xef7ffff7f7ffe000L) != 0L || (active1 & 0x1fbfffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x1080000808000000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0xfffffff7ff3fe000L) != 0L || (active1 & 0x1dbffbL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 2;
            }
            return 1;
         }
         if ((active0 & 0xc00000L) != 0L || (active1 & 0x20004L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xdffffff1fff9e000L) != 0L || (active1 & 0xd3febL) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x2000000600060000L) != 0L || (active1 & 0x108000L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x9ddfedf131d9e000L) != 0L || (active1 & 0x51ee3L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0x42201200ce200000L) != 0L || (active1 & 0x82108L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x1cdfc571b1d8e000L) != 0L || (active1 & 0x53ea3L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x8100288000010000L) != 0L || (active1 & 0x40L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x1c1d0571b1d8a000L) != 0L || (active1 & 0x41a23L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0xc2c00000004000L) != 0L || (active1 & 0x12480L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x1001045081c02000L) != 0L || (active1 & 0x41001L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 7;
            }
            return 1;
         }
         if ((active0 & 0xc1c012130188000L) != 0L || (active1 & 0xa22L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x1008005081000000L) != 0L || (active1 & 0x1001L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x1040000c02000L) != 0L || (active1 & 0x40000L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x4080000000L) != 0L || (active1 & 0x1000L) != 0L)
            return 1;
         if ((active0 & 0x1008001001000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 10;
            return 1;
         }
         if ((active0 & 0x1000001001000000L) != 0L || (active1 & 0x1L) != 0L)
            return 1;
         return -1;
      case 11:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 11;
            return 1;
         }
         return -1;
      case 12:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L);
      case 34:
         return jjStartNfaWithStates_0(0, 7, 6);
      case 37:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L);
      case 38:
         jjmatchedKind = 118;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L);
      case 40:
         return jjStopAtPos(0, 87);
      case 41:
         return jjStopAtPos(0, 88);
      case 42:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L);
      case 43:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x12000000000L);
      case 44:
         return jjStopAtPos(0, 93);
      case 45:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x24000000000L);
      case 46:
         return jjStopAtPos(0, 92);
      case 47:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x400L, 0x80000000000L);
      case 58:
         return jjStopAtPos(0, 94);
      case 59:
         return jjStopAtPos(0, 91);
      case 60:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x202000000000000L);
      case 61:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L);
      case 62:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x404000000000000L);
      case 91:
         return jjStopAtPos(0, 89);
      case 93:
         return jjStopAtPos(0, 90);
      case 94:
         return jjStopAtPos(0, 117);
      case 65:
      case 97:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x200000006000L, 0x2100L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x28000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x120000000fc0000L, 0x20000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x80L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2400008030000000L, 0x200L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1c0000000L, 0x80000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc017400000000L, 0x2L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x420L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x100000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3c40201000000L, 0x10000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000010000L, 0x800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x12c0000808000000L, 0x40L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x1001L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4001cL);
      case 123:
         return jjStopAtPos(0, 85);
      case 124:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L);
      case 125:
         return jjStopAtPos(0, 86);
      case 126:
         return jjStopAtPos(0, 103);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         break;
      case 42:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 43:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         break;
      case 45:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         break;
      case 60:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 61:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         break;
      case 62:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004a02021c0000L, active1, 0x8000cL);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0x2100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x40880L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000004000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
      case 73:
      case 105:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x50800000c8000000L, active1, 0x20L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100200000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xc003000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c010000000L, active1, 0x2L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000005c18000L, active1, 0x20410L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1840400000000L, active1, 0x11001L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x2400000000000000L, active1, 0x8000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x202100000000000L, active1, 0x100000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0x200L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 124:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x408000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000200000L, active1, 0x9001L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000004000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000002000000L, active1, 0x8L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x400L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x840000004000L, active1, 0x40L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x180010L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000c0c00000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000100008000L, active1, 0x10000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20c003000080000L, active1, 0x200L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x800L);
      case 82:
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0xc020020201100000L, active1, 0x42100L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80004000042000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000098020020000L, active1, 0x2L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200010000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
      case 65:
      case 97:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 1);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x44000000c0100000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L);
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x300218022000000L, active1, 0x82L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800080000000000L, active1, 0x2108L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2001004008000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x40008000000L, active1, 0x1021L);
      case 79:
      case 111:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 1);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 1);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000002000000000L, active1, 0x200L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1c000000004000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000L, active1, 0x80000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0xe1004100882000L, active1, 0x40L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0xc00L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x900000000000L, active1, 0x10000L);
      case 193:
      case 225:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x804100000000L, active1, 0x40000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000100000L, active1, 0xc0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 1);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x91401010018000L, active1, 0x10800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4e000000800000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0x400L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000020000000L, active1, 0x2L);
      case 79:
      case 111:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 1);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 1);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 1);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 1);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 1);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 1);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 1);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 1);
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100021a000002000L, active1, 0x2200L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1001L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x30L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 1);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x40e000L, active1, 0x400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x42000000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x800020000000L, active1, 0x40000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000001000000L, active1, 0x10000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L);
      case 72:
      case 104:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 1);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0x1011L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x8c001080000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x800004100800000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 1);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x10080000L, active1, 0x820L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x2000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x402000100000L, active1, 0x282L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x410012010080000L, active1, 0x222L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000002000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 1);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 77, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000010a0100000L, active1, 0x40000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0xd000000000000L, active1, 0x800L);
      case 76:
      case 108:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(6, 68);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000408000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 1);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 1);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 1);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 1);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 1);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 1);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 1);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x1001L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000800000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000004000000000L, active1, 0x1000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x1080000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);
      case 82:
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 1);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 1);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 1);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 1);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 1);
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 1);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 1);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 1);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 1);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0x40000L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 1);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 1);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x402000L, active1, 0L);
      case 90:
      case 122:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 40, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 22, 1);
         break;
      case 76:
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 1);
         break;
      case 79:
      case 111:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 13, 1);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 1);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 82, 1);
         break;
      case 82:
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x1080000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000001000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 31, 1);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 76, 1);
         break;
      case 82:
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 38, 1);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 24, 1);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(10, 64, 1);
         break;
      case 82:
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 36, 1);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 60, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 51, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     { jjCheckNAdd(2); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 6:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  else if (curChar == 34)
                  {
                     if (kind > 125)
                        kind = 125;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAdd(2); }
                  break;
               case 3:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 4:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 125)
                     kind = 125;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAdd(1); }
                  break;
               case 6:
               case 4:
                  { jjCheckNAddTwoStates(4, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x800L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 12)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\173", "\175", "\50", "\51", "\133", "\135", "\73", "\56", "\54", 
"\72", "\53", "\55", "\52", "\57", "\45", "\75", "\53\53", "\55\55", "\176", 
"\53\75", "\55\75", "\52\75", "\57\75", "\45\75", "\75\75", "\41\75", "\74", "\76", 
"\74\75", "\76\75", "\41", "\174\174", "\136", "\46", "\174", "\46\46", "\74\74", 
"\76\76", null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while ((curChar < 64 && (0x8100003700L & (1L << curChar)) != 0L) || 
                   (curChar >> 6) == 1 && (0x10000000L & (1L << (curChar & 077))) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public GramaticaTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public GramaticaTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 6; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "DentroComentario",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe001L, 0x3fffffffffffffffL, 
};
static final long[] jjtoSkip = {
   0xffeL, 0x0L, 
};
static final long[] jjtoMore = {
   0x1000L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[6];
    private final int[] jjstateSet = new int[2 * 6];

    
    protected char curChar;
}
