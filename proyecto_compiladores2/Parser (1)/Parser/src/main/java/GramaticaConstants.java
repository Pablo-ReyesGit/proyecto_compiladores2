/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
package Javacc;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ABSTRACT = 13;
  /** RegularExpression Id. */
  int ASSERT = 14;
  /** RegularExpression Id. */
  int BOOLEAN = 15;
  /** RegularExpression Id. */
  int BREAK = 16;
  /** RegularExpression Id. */
  int BYTE = 17;
  /** RegularExpression Id. */
  int CASE = 18;
  /** RegularExpression Id. */
  int CATCH = 19;
  /** RegularExpression Id. */
  int CHAR = 20;
  /** RegularExpression Id. */
  int CLASS = 21;
  /** RegularExpression Id. */
  int CONST = 22;
  /** RegularExpression Id. */
  int CONTINUE = 23;
  /** RegularExpression Id. */
  int DEFAULT_KEYWORD = 24;
  /** RegularExpression Id. */
  int DO = 25;
  /** RegularExpression Id. */
  int DOUBLE = 26;
  /** RegularExpression Id. */
  int ELSE = 27;
  /** RegularExpression Id. */
  int ENUM = 28;
  /** RegularExpression Id. */
  int EXTENDS = 29;
  /** RegularExpression Id. */
  int FINAL = 30;
  /** RegularExpression Id. */
  int FINALLY = 31;
  /** RegularExpression Id. */
  int FLOAT = 32;
  /** RegularExpression Id. */
  int FOR = 33;
  /** RegularExpression Id. */
  int GOTO = 34;
  /** RegularExpression Id. */
  int IF = 35;
  /** RegularExpression Id. */
  int IMPLEMENTS = 36;
  /** RegularExpression Id. */
  int IMPORT = 37;
  /** RegularExpression Id. */
  int INSTANCEOF = 38;
  /** RegularExpression Id. */
  int ENTERO = 39;
  /** RegularExpression Id. */
  int INTERFACE = 40;
  /** RegularExpression Id. */
  int LONG = 41;
  /** RegularExpression Id. */
  int MAIN = 42;
  /** RegularExpression Id. */
  int NATIVE = 43;
  /** RegularExpression Id. */
  int NEW = 44;
  /** RegularExpression Id. */
  int OUT = 45;
  /** RegularExpression Id. */
  int PACKAGE = 46;
  /** RegularExpression Id. */
  int PRIVATE = 47;
  /** RegularExpression Id. */
  int PROTECTED = 48;
  /** RegularExpression Id. */
  int PUBLIC = 49;
  /** RegularExpression Id. */
  int PRINT = 50;
  /** RegularExpression Id. */
  int PRINTLN = 51;
  /** RegularExpression Id. */
  int RETURN = 52;
  /** RegularExpression Id. */
  int SHORT = 53;
  /** RegularExpression Id. */
  int STATIC = 54;
  /** RegularExpression Id. */
  int SYSTEM = 55;
  /** RegularExpression Id. */
  int STRICTFP = 56;
  /** RegularExpression Id. */
  int STRING = 57;
  /** RegularExpression Id. */
  int SUPER = 58;
  /** RegularExpression Id. */
  int SCANNER = 59;
  /** RegularExpression Id. */
  int SWITCH = 60;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 61;
  /** RegularExpression Id. */
  int THIS = 62;
  /** RegularExpression Id. */
  int THROW = 63;
  /** RegularExpression Id. */
  int THROWS = 64;
  /** RegularExpression Id. */
  int TRANSIENT = 65;
  /** RegularExpression Id. */
  int TRY = 66;
  /** RegularExpression Id. */
  int VAR = 67;
  /** RegularExpression Id. */
  int VOID = 68;
  /** RegularExpression Id. */
  int VOLATILE = 69;
  /** RegularExpression Id. */
  int WHILE = 70;
  /** RegularExpression Id. */
  int OPEN = 71;
  /** RegularExpression Id. */
  int EXPORTS = 72;
  /** RegularExpression Id. */
  int MODULE = 73;
  /** RegularExpression Id. */
  int REQUIRES = 74;
  /** RegularExpression Id. */
  int TRANSITIVE = 75;
  /** RegularExpression Id. */
  int OPENS = 76;
  /** RegularExpression Id. */
  int TO = 77;
  /** RegularExpression Id. */
  int USES = 78;
  /** RegularExpression Id. */
  int PROVIDES = 79;
  /** RegularExpression Id. */
  int WITH = 80;
  /** RegularExpression Id. */
  int TRUE = 81;
  /** RegularExpression Id. */
  int FALSE = 82;
  /** RegularExpression Id. */
  int NULL = 83;
  /** RegularExpression Id. */
  int LLAVE_IZQ = 84;
  /** RegularExpression Id. */
  int LLAVE_DER = 85;
  /** RegularExpression Id. */
  int PARENT_IZQ = 86;
  /** RegularExpression Id. */
  int PARENT_DER = 87;
  /** RegularExpression Id. */
  int ARRAY_IZQ = 88;
  /** RegularExpression Id. */
  int ARRAY_DER = 89;
  /** RegularExpression Id. */
  int PUNTO_COMA = 90;
  /** RegularExpression Id. */
  int PUNTO = 91;
  /** RegularExpression Id. */
  int COMA = 92;
  /** RegularExpression Id. */
  int SUMA = 93;
  /** RegularExpression Id. */
  int RESTA = 94;
  /** RegularExpression Id. */
  int MULTIPLICAR = 95;
  /** RegularExpression Id. */
  int DIVIDIR = 96;
  /** RegularExpression Id. */
  int MODULO = 97;
  /** RegularExpression Id. */
  int ASIGNACION = 98;
  /** RegularExpression Id. */
  int INCREMENTO = 99;
  /** RegularExpression Id. */
  int DECREMENTO = 100;
  /** RegularExpression Id. */
  int COMPL_BINARIO = 101;
  /** RegularExpression Id. */
  int SUMA_COMBINADA = 102;
  /** RegularExpression Id. */
  int RESTA_COMBINADA = 103;
  /** RegularExpression Id. */
  int PRODUCTO_COMBINADO = 104;
  /** RegularExpression Id. */
  int DIVISION_COMBINADA = 105;
  /** RegularExpression Id. */
  int RESTO_COMBINADO = 106;
  /** RegularExpression Id. */
  int IGUAL_QUE = 107;
  /** RegularExpression Id. */
  int NO_IGUAL_QUE = 108;
  /** RegularExpression Id. */
  int MENOR_QUE = 109;
  /** RegularExpression Id. */
  int MAYOR_QUE = 110;
  /** RegularExpression Id. */
  int MENOR_IGUAL = 111;
  /** RegularExpression Id. */
  int MAYOR_IGUAL = 112;
  /** RegularExpression Id. */
  int NEGACION = 113;
  /** RegularExpression Id. */
  int OR = 114;
  /** RegularExpression Id. */
  int XOR = 115;
  /** RegularExpression Id. */
  int AND = 116;
  /** RegularExpression Id. */
  int SUMA_LOGICA = 117;
  /** RegularExpression Id. */
  int AND_LOGICA = 118;
  /** RegularExpression Id. */
  int DESPLAZAMIENTO_IZQ = 119;
  /** RegularExpression Id. */
  int DESPLAZAMIENTO_DER = 120;
  /** RegularExpression Id. */
  int ID = 121;
  /** RegularExpression Id. */
  int NUMBER = 122;
  /** RegularExpression Id. */
  int CADENA_TEXTO = 123;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\b\"",
    "\"\\f\"",
    "\"\\\"\"",
    "\"\\\'\"",
    "\"\\\\\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 12>",
    "\"abstract\"",
    "\"assert\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"main\"",
    "\"native\"",
    "\"new\"",
    "\"out\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"print\"",
    "\"println\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"system\"",
    "\"strictfp\"",
    "\"String\"",
    "\"super\"",
    "\"Scanner\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"try\"",
    "\"var\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"open\"",
    "\"exports\"",
    "\"module\"",
    "\"requires\"",
    "\"transitive\"",
    "\"opens\"",
    "\"to\"",
    "\"uses\"",
    "\"provides\"",
    "\"with\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\".\"",
    "\",\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"++\"",
    "\"--\"",
    "\"~\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"!\"",
    "\"||\"",
    "\"^\"",
    "\"&\"",
    "\"|\"",
    "\"&&\"",
    "\"<<\"",
    "\">>\"",
    "<ID>",
    "<NUMBER>",
    "<CADENA_TEXTO>",
  };

}
