
options {
    IGNORE_CASE = true;
    STATIC = false;
}

PARSER_BEGIN(Gramatica)
package org.example;
public class Gramatica {
    public static void main(String[] args) throws ParseException {
        Gramatica parser = new Gramatica(System.in);
        parser.Inicio();  // Llamada al método 'inicio()' generado
    }
}

PARSER_END(Gramatica)

void Inicio()  :
{}
{
    ( sentencia() )*
}

void Clase() :
{}
{
    (Modificador())* <CLASE> <IDENTIFICADOR> <LLAVE_IZQ> (Metodo())* <LLAVE_DER>
}

void Modificador() :
{}
{
    <PUBLICO> | <PRIVADO> | <PROTEGIDO> | <ESTATICO>
}

void Metodo() : {}
{
    ( Modificador() )* tipo_de_dato() <IDENTIFICADOR> <PARENT_IZQ> Parametros() <PARENT_DER> <LLAVE_IZQ> ( sentencia() )* <LLAVE_DER>
}

void Parametros() :
{}
{
    tipo_de_dato() <IDENTIFICADOR> (<ARRAY_IZQ> <ARRAY_DER>)? (<COMA> tipo_de_dato() <IDENTIFICADOR> (<ARRAY_IZQ> <ARRAY_DER>)?)*
}
void sentencia() :
{}
{
    declaracion()
  | asignacion()
  | si()
  | mientras()
  | para()
  | imprimir()
  | Metodo()
  | Bloque()
  | hacer()
  | seleccion()

    }

void Bloque() :
{}
{
    <LLAVE_IZQ> (sentencia() )* <LLAVE_DER>
}

void asignacion() :
{}
{

    <IDENTIFICADOR> <ASIGNACION> expresion() <PUNTO_COMA>

}

void imprimir() :
{}
{

    <IMPRIMIR> <PARENT_IZQ> expresion() <PARENT_DER> <PUNTO_COMA>

}

void si():
{}
{

    <SI> <PARENT_IZQ> expresion() <PARENT_DER> cuerpo_si()

}

void cuerpo_si()  :
{}
{
    <LLAVE_IZQ> ( sentencia() )* <LLAVE_DER>
    [ <SI_NO> <LLAVE_IZQ> ( sentencia() )* <LLAVE_DER> ]
}

void mientras() :
{}
{

    <MIENTRAS> <PARENT_IZQ> expresion() <PARENT_DER> cuerpo_mientras()

}

void cuerpo_mientras() :
{}
{

    <LLAVE_IZQ> ( sentencia() )* <LLAVE_DER>

}

void para() :
{}
{

    <PARA> <PARENT_IZQ> asignacion() <PUNTO_COMA> expresion() <PUNTO_COMA> asignacion() <PARENT_DER> cuerpo_para()
}

void cuerpo_para() :
{}
{

    <LLAVE_IZQ> ( sentencia() )* <LLAVE_DER>

}

void hacer() :
{}
{

    <HACER> cuerpo_hacer() <MIENTRAS> <PARENT_IZQ> expresion() <PARENT_DER> <PUNTO_COMA>

}

void cuerpo_hacer() :
{}
{

    <LLAVE_IZQ> ( sentencia() )* <LLAVE_DER>

}

void seleccion():
{}
{

    <SWITCH> <PARENT_IZQ> expresion() <PARENT_DER>
    <LLAVE_IZQ>
        (
            <CASO> expresion() <DOS_PUNTOS>
            (sentencia())*
        )*
        [ <DEFECTO> <DOS_PUNTOS> (sentencia())* ]
    <LLAVE_DER>

}

void SITUACION() :
{}
{

    <CASO> expresion() <DOS_PUNTOS> ( sentencia() )*

}

void declaracion():
{}
{
    tipo_de_dato() <IDENTIFICADOR> <PUNTO_COMA>

}

void tipo_de_dato() :
{}
{

    <ENTERO>
|   <FLOTANTE>
|   <CADENA>
|   <BOOLEANO>
|   <CARACTER>

}

void expresion() :
{}
{

    operando() ( operador() operando() )*

}

void operando() :
{}
{
    <IDENTIFICADOR>
|   <ENTERO_LITERAL>
|   <CADENA_LITERAL>
|   <VERDADERO> | <FALSO>
|   <PARENT_IZQ> expresion() <PARENT_DER>
}

void operador() :
{}
{
    <SUMA> | <RESTA> | <MULTI> | <DIVI> | <MODULO>
|   <IGUAL_QUE> | <NO_IGUAL_QUE> | <MENOR_QUE> | <MAYOR_QUE> | <MENOR_IGUAL> | <MAYOR_IGUAL>
|   <AND_LOGICA> | <OR> | <NEGACION>
}

/* Analizador léxico para Java */

SKIP :  /* secuencias de escape */
{
    " "
|   "\r"
|   "\t"
|   "\n"
|   "\b"
|   "\f"
|   "\""
|   "\'"
|   "\\"
}

SKIP : /* Comentarios de bloque */
{
    "/*" : DentroComentario
}

<DentroComentario> SKIP :
{
    "*/" : DEFAULT
}

<DentroComentario> MORE :
{
    <~["*"]> // Cualquier cosa que no sea el cierre del comentario.
}

/* Palabras Reservadas */
TOKEN :
{
  <ABSTRACTO: "abstracto">
| <AFIRMAR: "afirmar">
| <BOOLEANO: "booleano">
| <ROMPER: "romper">
| <BYTE: "byte">
| <CASO: "caso">
| <CAPTURAR: "capturar">
| <CARACTER: "caracter">
| <CLASE: "clase">
| <CONSTANTE: "constante">
| <CONTINUAR: "continuar">
| <POR_DEFECTO: "por_defecto">
| <HACER: "hacer">
| <DOBLE: "doble">
| <SI_NO: "si_no">
| <ENUMERAR: "enumerar">
| <EXTENDER: "extender">
| <FINAL: "final">
| <FINALMENTE: "finalmente">
| <FLOTANTE: "flotante">
| <PARA: "para">
| <IR_A: "ir_a">
| <SI: "si">
| <IMPLEMENTAR: "implementar">
| <IMPORTAR: "importar">
| <INSTANCIAR: "instanciar">
| <ENTERO: "entero">
| <INTERFAZ: "interfaz">
| <LARGO: "largo">
| <PRINCIPAL: "principal">
| <NATIVO: "nativo">
| <NUEVO: "nuevo">
| <AFUERA: "afuera">
| <PAQUETE: "paquete">
| <PRIVADO: "privado">
| <PROTEGIDO: "protegido">
| <PUBLICO: "publico">
| <IMPRIMIR: "imprimir">
| <IMPRIMIR_LINEA: "imprimir_linea">
| <REGRESAR: "regresar">
| <CORTO: "corto">
| <ESTATICO: "statico">
| <SISTEMA: "sistema">
| <CADENA: "cadena">
| <SUPER: "super">
| <ESCANEAR: "escanear">
| <OPCIONES: "opciones">
| <SYNCHRONIZAR: "sincronizar">
| <ESTO: "esto">
| <TIRAR: "tirar">
| <TIRAR_EXCEPCION: "throws">
| <TRANSITORIO: "transitorio">
| <INTENTAR: "intentar">
| <VAR: "var">
| <VACIO: "vacío">
| <VOLATIL: "volátil">
| <MIENTRAS: "mientras">
| <SWITCH: "switch">
| <DEFECTO: "defecto">
}

/* Palabras Clave context-sensitive */
TOKEN :
{
  <ABRIR: "abrir">
| <EXPORTAR: "exportar">
| <MODULAR: "modular">
| <REQUERIR: "requerir">
| <TRANSITIVO: "transitivo">
| <ABRIRS: "abrirse">
| <A: "a">
| <USAR: "usar">
| <PROVEER: "proveer">
| <CON: "con">
}

/* Literales reservados */
TOKEN :
{
  <VERDADERO: "verdadero">
| <FALSO: "falso">
| <NULO: "nulo">
}

/* Puntuación */
TOKEN :
{
  <LLAVE_IZQ: "{">
| <LLAVE_DER: "}">
| <PARENT_IZQ: "(">
| <PARENT_DER: ")">
| <ARRAY_IZQ: "[">
| <ARRAY_DER: "]">
| <PUNTO_COMA: ";">
| <PUNTO: ".">
| <COMA: ",">
| <DOS_PUNTOS: ":">
}

TOKEN : /* Operadores */
{
  // Aritméticos
  <SUMA: "+">
| <RESTA: "-">
| <MULTI: "*">
| <DIVI: "/">
| <MODULO: "%">

  // Asignación
| <ASIGNACION: "=">

  // Unarios
| <INCREMENTO: "++">
| <DECREMENTO: "--">
| <COMPL_BINARIO: "~">

  // Aritméticos combinados
| <SUMA_COMBINADA: "+=">
| <RESTA_COMBINADA: "-=">
| <PRODUCTO_COMBINADO: "*=">
| <DIVISION_COMBINADA: "/=">
| <RESTO_COMBINADO: "%=">

  // Relacionales
| <IGUAL_QUE: "==">
| <NO_IGUAL_QUE: "!=">
| <MENOR_QUE: "<">
| <MAYOR_QUE: ">">
| <MENOR_IGUAL: "<=">
| <MAYOR_IGUAL: ">=">

  // Lógicos o booleanos
| <NEGACION: "!">
| <OR: "||">
| <XOR: "^">
| <AND: "&">
| <SUMA_LOGICA: "|">
| <AND_LOGICA: "&&">

  // Bitwise
| <DESPLAZAMIENTO_IZQ: "<<">
| <DESPLAZAMIENTO_DER: ">>">
}

// IDENTIFICADORES
TOKEN: // IDENTIFICADORES
{
<IDENTIFICADOR: (["a"-"z"] | ["A"-"Z"]) (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_")*>
}

TOKEN: // Literales numéricos y cadenas
{
    <ENTERO_LITERAL: (["0"-"9"])+>
|   <CADENA_LITERAL: "\"" (~["\""])* "\"">
}
