/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
package org.example;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ABSTRACTO = 13;
  /** RegularExpression Id. */
  int AFIRMAR = 14;
  /** RegularExpression Id. */
  int BOOLEANO = 15;
  /** RegularExpression Id. */
  int ROMPER = 16;
  /** RegularExpression Id. */
  int BYTE = 17;
  /** RegularExpression Id. */
  int CASO = 18;
  /** RegularExpression Id. */
  int CAPTURAR = 19;
  /** RegularExpression Id. */
  int CARACTER = 20;
  /** RegularExpression Id. */
  int CLASE = 21;
  /** RegularExpression Id. */
  int CONSTANTE = 22;
  /** RegularExpression Id. */
  int CONTINUAR = 23;
  /** RegularExpression Id. */
  int POR_DEFECTO = 24;
  /** RegularExpression Id. */
  int HACER = 25;
  /** RegularExpression Id. */
  int DOBLE = 26;
  /** RegularExpression Id. */
  int SI_NO = 27;
  /** RegularExpression Id. */
  int ENUMERAR = 28;
  /** RegularExpression Id. */
  int EXTENDER = 29;
  /** RegularExpression Id. */
  int FINAL = 30;
  /** RegularExpression Id. */
  int FINALMENTE = 31;
  /** RegularExpression Id. */
  int FLOTANTE = 32;
  /** RegularExpression Id. */
  int PARA = 33;
  /** RegularExpression Id. */
  int IR_A = 34;
  /** RegularExpression Id. */
  int SI = 35;
  /** RegularExpression Id. */
  int IMPLEMENTAR = 36;
  /** RegularExpression Id. */
  int IMPORTAR = 37;
  /** RegularExpression Id. */
  int INSTANCIAR = 38;
  /** RegularExpression Id. */
  int ENTERO = 39;
  /** RegularExpression Id. */
  int INTERFAZ = 40;
  /** RegularExpression Id. */
  int LARGO = 41;
  /** RegularExpression Id. */
  int PRINCIPAL = 42;
  /** RegularExpression Id. */
  int NATIVO = 43;
  /** RegularExpression Id. */
  int NUEVO = 44;
  /** RegularExpression Id. */
  int AFUERA = 45;
  /** RegularExpression Id. */
  int PAQUETE = 46;
  /** RegularExpression Id. */
  int PRIVADO = 47;
  /** RegularExpression Id. */
  int PROTEGIDO = 48;
  /** RegularExpression Id. */
  int PUBLICO = 49;
  /** RegularExpression Id. */
  int IMPRIMIR = 50;
  /** RegularExpression Id. */
  int IMPRIMIR_LINEA = 51;
  /** RegularExpression Id. */
  int REGRESAR = 52;
  /** RegularExpression Id. */
  int CORTO = 53;
  /** RegularExpression Id. */
  int ESTATICO = 54;
  /** RegularExpression Id. */
  int SISTEMA = 55;
  /** RegularExpression Id. */
  int CADENA = 56;
  /** RegularExpression Id. */
  int SUPER = 57;
  /** RegularExpression Id. */
  int ESCANEAR = 58;
  /** RegularExpression Id. */
  int OPCIONES = 59;
  /** RegularExpression Id. */
  int SYNCHRONIZAR = 60;
  /** RegularExpression Id. */
  int ESTO = 61;
  /** RegularExpression Id. */
  int TIRAR = 62;
  /** RegularExpression Id. */
  int TIRAR_EXCEPCION = 63;
  /** RegularExpression Id. */
  int TRANSITORIO = 64;
  /** RegularExpression Id. */
  int INTENTAR = 65;
  /** RegularExpression Id. */
  int VAR = 66;
  /** RegularExpression Id. */
  int VACIO = 67;
  /** RegularExpression Id. */
  int VOLATIL = 68;
  /** RegularExpression Id. */
  int MIENTRAS = 69;
  /** RegularExpression Id. */
  int SWITCH = 70;
  /** RegularExpression Id. */
  int DEFECTO = 71;
  /** RegularExpression Id. */
  int ABRIR = 72;
  /** RegularExpression Id. */
  int EXPORTAR = 73;
  /** RegularExpression Id. */
  int MODULAR = 74;
  /** RegularExpression Id. */
  int REQUERIR = 75;
  /** RegularExpression Id. */
  int TRANSITIVO = 76;
  /** RegularExpression Id. */
  int ABRIRS = 77;
  /** RegularExpression Id. */
  int A = 78;
  /** RegularExpression Id. */
  int USAR = 79;
  /** RegularExpression Id. */
  int PROVEER = 80;
  /** RegularExpression Id. */
  int CON = 81;
  /** RegularExpression Id. */
  int VERDADERO = 82;
  /** RegularExpression Id. */
  int FALSO = 83;
  /** RegularExpression Id. */
  int NULO = 84;
  /** RegularExpression Id. */
  int LLAVE_IZQ = 85;
  /** RegularExpression Id. */
  int LLAVE_DER = 86;
  /** RegularExpression Id. */
  int PARENT_IZQ = 87;
  /** RegularExpression Id. */
  int PARENT_DER = 88;
  /** RegularExpression Id. */
  int ARRAY_IZQ = 89;
  /** RegularExpression Id. */
  int ARRAY_DER = 90;
  /** RegularExpression Id. */
  int PUNTO_COMA = 91;
  /** RegularExpression Id. */
  int PUNTO = 92;
  /** RegularExpression Id. */
  int COMA = 93;
  /** RegularExpression Id. */
  int DOS_PUNTOS = 94;
  /** RegularExpression Id. */
  int SUMA = 95;
  /** RegularExpression Id. */
  int RESTA = 96;
  /** RegularExpression Id. */
  int MULTI = 97;
  /** RegularExpression Id. */
  int DIVI = 98;
  /** RegularExpression Id. */
  int MODULO = 99;
  /** RegularExpression Id. */
  int ASIGNACION = 100;
  /** RegularExpression Id. */
  int INCREMENTO = 101;
  /** RegularExpression Id. */
  int DECREMENTO = 102;
  /** RegularExpression Id. */
  int COMPL_BINARIO = 103;
  /** RegularExpression Id. */
  int SUMA_COMBINADA = 104;
  /** RegularExpression Id. */
  int RESTA_COMBINADA = 105;
  /** RegularExpression Id. */
  int PRODUCTO_COMBINADO = 106;
  /** RegularExpression Id. */
  int DIVISION_COMBINADA = 107;
  /** RegularExpression Id. */
  int RESTO_COMBINADO = 108;
  /** RegularExpression Id. */
  int IGUAL_QUE = 109;
  /** RegularExpression Id. */
  int NO_IGUAL_QUE = 110;
  /** RegularExpression Id. */
  int MENOR_QUE = 111;
  /** RegularExpression Id. */
  int MAYOR_QUE = 112;
  /** RegularExpression Id. */
  int MENOR_IGUAL = 113;
  /** RegularExpression Id. */
  int MAYOR_IGUAL = 114;
  /** RegularExpression Id. */
  int NEGACION = 115;
  /** RegularExpression Id. */
  int OR = 116;
  /** RegularExpression Id. */
  int XOR = 117;
  /** RegularExpression Id. */
  int AND = 118;
  /** RegularExpression Id. */
  int SUMA_LOGICA = 119;
  /** RegularExpression Id. */
  int AND_LOGICA = 120;
  /** RegularExpression Id. */
  int DESPLAZAMIENTO_IZQ = 121;
  /** RegularExpression Id. */
  int DESPLAZAMIENTO_DER = 122;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 123;
  /** RegularExpression Id. */
  int ENTERO_LITERAL = 124;
  /** RegularExpression Id. */
  int CADENA_LITERAL = 125;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int DentroComentario = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\b\"",
    "\"\\f\"",
    "\"\\\"\"",
    "\"\\\'\"",
    "\"\\\\\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 12>",
    "\"abstracto\"",
    "\"afirmar\"",
    "\"booleano\"",
    "\"romper\"",
    "\"byte\"",
    "\"caso\"",
    "\"capturar\"",
    "\"caracter\"",
    "\"clase\"",
    "\"constante\"",
    "\"continuar\"",
    "\"por_defecto\"",
    "\"hacer\"",
    "\"doble\"",
    "\"si_no\"",
    "\"enumerar\"",
    "\"extender\"",
    "\"final\"",
    "\"finalmente\"",
    "\"flotante\"",
    "\"para\"",
    "\"ir_a\"",
    "\"si\"",
    "\"implementar\"",
    "\"importar\"",
    "\"instanciar\"",
    "\"entero\"",
    "\"interfaz\"",
    "\"largo\"",
    "\"principal\"",
    "\"nativo\"",
    "\"nuevo\"",
    "\"afuera\"",
    "\"paquete\"",
    "\"privado\"",
    "\"protegido\"",
    "\"publico\"",
    "\"imprimir\"",
    "\"imprimir_linea\"",
    "\"regresar\"",
    "\"corto\"",
    "\"statico\"",
    "\"sistema\"",
    "\"cadena\"",
    "\"super\"",
    "\"escanear\"",
    "\"opciones\"",
    "\"sincronizar\"",
    "\"esto\"",
    "\"tirar\"",
    "\"throws\"",
    "\"transitorio\"",
    "\"intentar\"",
    "\"var\"",
    "\"vac\\u00edo\"",
    "\"vol\\u00e1til\"",
    "\"mientras\"",
    "\"switch\"",
    "\"defecto\"",
    "\"abrir\"",
    "\"exportar\"",
    "\"modular\"",
    "\"requerir\"",
    "\"transitivo\"",
    "\"abrirse\"",
    "\"a\"",
    "\"usar\"",
    "\"proveer\"",
    "\"con\"",
    "\"verdadero\"",
    "\"falso\"",
    "\"nulo\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\".\"",
    "\",\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"++\"",
    "\"--\"",
    "\"~\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"!\"",
    "\"||\"",
    "\"^\"",
    "\"&\"",
    "\"|\"",
    "\"&&\"",
    "\"<<\"",
    "\">>\"",
    "<IDENTIFICADOR>",
    "<ENTERO_LITERAL>",
    "<CADENA_LITERAL>",
  };

}
