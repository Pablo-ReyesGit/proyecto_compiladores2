/* Generated By:JavaCC: Do not edit this line. GramaticaTokenManager.java */
package Javacc;

/** Token Manager. */
public class GramaticaTokenManager implements GramaticaConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80L) != 0L)
            return 6;
         if ((active0 & 0xffffffffffffe000L) != 0L || (active1 & 0xfffffL) != 0L)
         {
            jjmatchedKind = 121;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x806000000L) != 0L || (active1 & 0x2000L) != 0L)
            return 1;
         if ((active0 & 0xfffffff7f9ffe000L) != 0L || (active1 & 0xfdfffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 1;
            }
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x318200000000L) != 0L || (active1 & 0xcL) != 0L)
            return 1;
         if ((active0 & 0xffffce75fdffe000L) != 0L || (active1 & 0xfdff3L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 2;
            }
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0xbfffc971e5e9e000L) != 0L || (active1 & 0x48f63L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 3;
            }
            return 1;
         }
         if ((active0 & 0x4000060418160000L) != 0L || (active1 & 0xb5090L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x3bd3c9702580e000L) != 0L || (active1 & 0x8f22L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0x842c0001c0690000L) != 0L || (active1 & 0x41041L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x2909c150a180a000L) != 0L || (active1 & 0x8d22L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x12d2082004004000L) != 0L || (active1 & 0x201L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x2101015000802000L) != 0L || (active1 & 0x8c22L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x808c000a1008000L) != 0L || (active1 & 0x100L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x2001015000000000L) != 0L || (active1 & 0x802L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x100000000802000L) != 0L || (active1 & 0x8420L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x2000005000000000L) != 0L || (active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x1010000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active0 & 0x5000000000L) != 0L || (active1 & 0x800L) != 0L)
            return 1;
         return -1;
      case 10:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L);
      case 34:
         return jjStartNfaWithStates_0(0, 7, 6);
      case 37:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L);
      case 38:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L);
      case 40:
         return jjStopAtPos(0, 86);
      case 41:
         return jjStopAtPos(0, 87);
      case 42:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 43:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4800000000L);
      case 44:
         return jjStopAtPos(0, 92);
      case 45:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x9000000000L);
      case 46:
         return jjStopAtPos(0, 91);
      case 47:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x400L, 0x20000000000L);
      case 59:
         return jjStopAtPos(0, 90);
      case 60:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80800000000000L);
      case 61:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L);
      case 62:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x101000000000000L);
      case 91:
         return jjStopAtPos(0, 88);
      case 93:
         return jjStopAtPos(0, 89);
      case 94:
         return jjStopAtPos(0, 115);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x6000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x38000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfc0000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x38000000L, 0x100L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3c0000000L, 0x40000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1f800000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x200L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x80000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x1080L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0xfc00000000000L, 0x8000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x400L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3fe0000000000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x22807L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x38L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10040L);
      case 123:
         return jjStopAtPos(0, 84);
      case 124:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L);
      case 125:
         return jjStopAtPos(0, 85);
      case 126:
         return jjStopAtPos(0, 101);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         break;
      case 42:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 43:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         break;
      case 45:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      case 60:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         break;
      case 61:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         break;
      case 62:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4c00000c0000L, active1, 0x40008L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10100001000000L, active1, 0x400L);
      case 70:
      case 102:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 1);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xc020000000100000L, active1, 0x41L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000L, active1, 0x10000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x108200000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c010000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 77, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x20604c08000L, active1, 0x230L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1080L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0xd800000010000L, active1, 0x28806L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0x4000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x340000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x402200000000000L, active1, 0x80000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0x100L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2080000000020000L, active1, 0L);
      case 124:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x840000000300000L, active1, 0x802L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x5080L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x500c840000000000L, active1, 0x50L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc0020L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000200c0c00000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x21000100008000L, active1, 0x8000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400003000000000L, active1, 0x100L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L);
      case 82:
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 1);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x8300000000000000L, active1, 0x1L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80004008046000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x100904200a0000L, active1, 0x10000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x14000000L, active1, 0x20000L);
      case 87:
      case 119:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 1);
         break;
      case 89:
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c1010000L, active1, 0x20L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000080000L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 1);
         break;
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 1);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 1);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 1);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x400010020004000L, active1, 0L);
      case 71:
      case 103:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 1);
         break;
      case 72:
      case 104:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 1);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x300080000000000L, active1, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x2001000008000L, active1, 0x40L);
      case 77:
      case 109:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 1);
         break;
      case 78:
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 1);
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80c000000000000L, active1, 0x1802L);
      case 79:
      case 111:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000002000000000L, active1, 0x101L);
      case 82:
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 1);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x600000L, active1, 0x40000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x10c1004000802000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x600L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc04000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1100000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 1);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x81001000008000L, active1, 0L);
      case 72:
      case 104:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x42000000800000L, active1, 0x8400L);
      case 75:
      case 107:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 1);
         break;
      case 76:
      case 108:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x84000000L, active1, 0x200L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0xa00000020000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x10012000006000L, active1, 0x100L);
      case 83:
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 1);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x802L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 1);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 1);
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L);
      case 87:
      case 119:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xa000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 1);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0x8000L);
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 1);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 1);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L);
      case 71:
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
      case 72:
      case 104:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 1);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x822L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000081000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000800000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0x400L);
      case 83:
      case 115:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 1);
         break;
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 1);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x100800000000000L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000002000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 1);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0x8402L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
      case 78:
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 1);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 1);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 1);
         break;
      case 83:
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 1);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 1);
         break;
      case 84:
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0x800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 1);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x1004000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000001000000000L, active1, 0x2L);
      case 80:
      case 112:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 1);
         break;
      case 83:
      case 115:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 1);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 79, 1);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 1);
         break;
      case 69:
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 1);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 65, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 75, 1);
         break;
      case 70:
      case 102:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 38, 1);
         break;
      case 83:
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 36, 1);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 61, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  else if (curChar == 34)
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 34 && kind > 123)
                     kind = 123;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(1);
                  break;
               case 6:
               case 4:
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
static private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x800L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 12)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\173", "\175", "\50", "\51", "\133", "\135", "\73", "\56", "\54", "\53", 
"\55", "\52", "\57", "\45", "\75", "\53\53", "\55\55", "\176", "\53\75", "\55\75", 
"\52\75", "\57\75", "\45\75", "\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", 
"\41", "\174\174", "\136", "\46", "\174", "\46\46", "\74\74", "\76\76", null, null, 
null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
   "WithinComment", 
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe001L, 0xfffffffffffffffL, 
};
static final long[] jjtoSkip = {
   0xffeL, 0x0L, 
};
static final long[] jjtoMore = {
   0x1000L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[6];
static private final int[] jjstateSet = new int[12];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public GramaticaTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public GramaticaTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 6; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while ((curChar < 64 && (0x8100003700L & (1L << curChar)) != 0L) || 
                   (curChar >> 6) == 1 && (0x10000000L & (1L << (curChar & 077))) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 13 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("ABSTRACT -> " + image + "\n");
         break;
      case 14 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("ASSERT -> " + image + "\n");
         break;
      case 15 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("BOOLEAN -> " + image + "\n");
         break;
      case 16 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("BREAK -> " + image + "\n");
         break;
      case 17 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("BYTE -> " + image + "\n");
         break;
      case 18 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("CASE -> " + image + "\n");
         break;
      case 19 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("CATCH -> " + image + "\n");
         break;
      case 20 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("CHAR -> " + image + "\n");
         break;
      case 21 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("CLASS -> " + image + "\n");
         break;
      case 22 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("CONST -> " + image + "\n");
         break;
      case 23 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("CONTINUE -> " + image + "\n");
         break;
      case 24 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 System.out.println("DEFAULT_KEYWORD -> " + image + "\n");
         break;
      case 25 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
               System.out.println("DO -> " + image + "\n");
         break;
      case 26 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("DOUBLE -> " + image + "\n");
         break;
      case 27 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("ELSE -> " + image + "\n");
         break;
      case 28 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("ENUM -> " + image + "\n");
         break;
      case 29 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("EXTENDS -> " + image + "\n");
         break;
      case 30 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("FINAL -> " + image + "\n");
         break;
      case 31 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("FINALLY -> " + image + "\n");
         break;
      case 32 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("FLOAT -> " + image + "\n");
         break;
      case 33 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println("FOR -> " + image + "\n");
         break;
      case 34 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("GOTO -> " + image + "\n");
         break;
      case 35 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
               System.out.println("IF -> " + image + "\n");
         break;
      case 36 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               System.out.println("IMPLEMENTS -> " + image + "\n");
         break;
      case 37 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("IMPORT -> " + image + "\n");
         break;
      case 38 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               System.out.println("INSTANCEOF -> " + image + "\n");
         break;
      case 39 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println("INT -> " + image + "\n");
         break;
      case 40 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("INTERFACE -> " + image + "\n");
         break;
      case 41 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("LONG -> " + image + "\n");
         break;
      case 42 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("MAIN -> " + image + "\n");
         break;
      case 43 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("NATIVE -> " + image + "\n");
         break;
      case 44 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println("NEW -> " + image + "\n");
         break;
      case 45 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println("OUT -> " + image + "\n");
         break;
      case 46 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("PACKAGE -> " + image + "\n");
         break;
      case 47 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("PRIVATE -> " + image + "\n");
         break;
      case 48 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("PROTECTED -> " + image + "\n");
         break;
      case 49 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("PUBLIC -> " + image + "\n");
         break;
      case 50 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("PRINT -> " + image + "\n");
         break;
      case 51 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("PRINTLN -> " + image + "\n");
         break;
      case 52 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("RETURN -> " + image + "\n");
         break;
      case 53 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("SHORT -> " + image + "\n");
         break;
      case 54 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("STATIC -> " + image + "\n");
         break;
      case 55 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("SYSTEM -> " + image + "\n");
         break;
      case 56 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("STRICTFP -> " + image + "\n");
         break;
      case 57 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("STRING -> " + image + "\n");
         break;
      case 58 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("SUPER -> " + image + "\n");
         break;
      case 59 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("SCANNER -> " + image + "\n");
         break;
      case 60 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("SWITCH -> " + image + "\n");
         break;
      case 61 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   System.out.println("SYNCHRONIZED -> " + image + "\n");
         break;
      case 62 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("THIS -> " + image + "\n");
         break;
      case 63 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("THROW -> " + image + "\n");
         break;
      case 64 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("THROWS -> " + image + "\n");
         break;
      case 65 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("TRANSIENT -> " + image + "\n");
         break;
      case 66 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println("TRY -> " + image + "\n");
         break;
      case 67 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println("VAR -> " + image + "\n");
         break;
      case 68 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("VOID -> " + image + "\n");
         break;
      case 69 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("VOLATILE -> " + image + "\n");
         break;
      case 70 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("WHILE -> " + image + "\n");
         break;
      case 71 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("OPEN -> " + image + "\n");
         break;
      case 72 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("EXPORTS -> " + image + "\n");
         break;
      case 73 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("MODULE -> " + image + "\n");
         break;
      case 74 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("REQUIRES -> " + image + "\n");
         break;
      case 75 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               System.out.println("TRANSITIVE -> " + image + "\n");
         break;
      case 76 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("OPENS -> " + image + "\n");
         break;
      case 77 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
               System.out.println("TO -> " + image + "\n");
         break;
      case 78 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("USES -> " + image + "\n");
         break;
      case 79 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("PROVIDES -> " + image + "\n");
         break;
      case 80 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("WITH -> " + image + "\n");
         break;
      case 81 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("TRUE -> " + image + "\n");
         break;
      case 82 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("FALSE -> " + image + "\n");
         break;
      case 83 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("NULL -> " + image + "\n");
         break;
      case 84 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[84]);
        lengthOfMatch = jjstrLiteralImages[84].length();
                     System.out.println("LLAVE_IZQ -> " + image + "\n");
         break;
      case 85 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[85]);
        lengthOfMatch = jjstrLiteralImages[85].length();
                     System.out.println("LLAVE_DER -> " + image + "\n");
         break;
      case 86 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[86]);
        lengthOfMatch = jjstrLiteralImages[86].length();
                      System.out.println("PARENT_IZQ -> " + image + "\n");
         break;
      case 87 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[87]);
        lengthOfMatch = jjstrLiteralImages[87].length();
                      System.out.println("PARENT_DER -> " + image + "\n");
         break;
      case 88 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[88]);
        lengthOfMatch = jjstrLiteralImages[88].length();
                     System.out.println("ARRAY_IZQ -> " + image + "\n");
         break;
      case 89 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[89]);
        lengthOfMatch = jjstrLiteralImages[89].length();
                     System.out.println("ARRAY_DER -> " + image + "\n");
         break;
      case 90 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[90]);
        lengthOfMatch = jjstrLiteralImages[90].length();
                      System.out.println("PUNTO_COMA -> " + image + "\n");
         break;
      case 91 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[91]);
        lengthOfMatch = jjstrLiteralImages[91].length();
                 System.out.println("PUNTO -> " + image + "\n");
         break;
      case 92 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[92]);
        lengthOfMatch = jjstrLiteralImages[92].length();
                System.out.println("COMA -> " + image + "\n");
         break;
      case 93 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[93]);
        lengthOfMatch = jjstrLiteralImages[93].length();
                System.out.println("SUMA -> " + image + "\n");
         break;
      case 94 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[94]);
        lengthOfMatch = jjstrLiteralImages[94].length();
                 System.out.println("RESTA -> " + image + "\n");
         break;
      case 95 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[95]);
        lengthOfMatch = jjstrLiteralImages[95].length();
                       System.out.println("MULTIPLICAR -> " + image + "\n");
         break;
      case 96 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[96]);
        lengthOfMatch = jjstrLiteralImages[96].length();
                   System.out.println("DIVIDIR -> " + image + "\n");
         break;
      case 97 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[97]);
        lengthOfMatch = jjstrLiteralImages[97].length();
                  System.out.println("MODULO -> " + image + "\n");
         break;
      case 98 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[98]);
        lengthOfMatch = jjstrLiteralImages[98].length();
                      System.out.println("ASIGNACION -> " + image + "\n");
         break;
      case 99 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[99]);
        lengthOfMatch = jjstrLiteralImages[99].length();
                       System.out.println("INCREMENTO -> " + image + "\n");
         break;
      case 100 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[100]);
        lengthOfMatch = jjstrLiteralImages[100].length();
                       System.out.println("DECREMENTO -> " + image + "\n");
         break;
      case 101 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[101]);
        lengthOfMatch = jjstrLiteralImages[101].length();
                         System.out.println("COMPL_BINARIO -> " + image + "\n");
         break;
      case 102 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[102]);
        lengthOfMatch = jjstrLiteralImages[102].length();
                           System.out.println("SUMA_COMBINADA -> " + image + "\n");
         break;
      case 103 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[103]);
        lengthOfMatch = jjstrLiteralImages[103].length();
                            System.out.println("RESTA_COMBINADA -> " + image + "\n");
         break;
      case 104 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[104]);
        lengthOfMatch = jjstrLiteralImages[104].length();
                               System.out.println("PRODUCTO_COMBINADO -> " + image + "\n");
         break;
      case 105 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[105]);
        lengthOfMatch = jjstrLiteralImages[105].length();
                               System.out.println("DIVISION_COMBINADA -> " + image + "\n");
         break;
      case 106 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[106]);
        lengthOfMatch = jjstrLiteralImages[106].length();
                            System.out.println("RESTO_COMBINADO -> " + image + "\n");
         break;
      case 107 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[107]);
        lengthOfMatch = jjstrLiteralImages[107].length();
                      System.out.println("IGUAL_QUE -> " + image + "\n");
         break;
      case 108 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[108]);
        lengthOfMatch = jjstrLiteralImages[108].length();
                         System.out.println("NO_IGUAL_QUE -> " + image + "\n");
         break;
      case 109 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[109]);
        lengthOfMatch = jjstrLiteralImages[109].length();
                     System.out.println("MENOR_QUE -> " + image + "\n");
         break;
      case 110 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[110]);
        lengthOfMatch = jjstrLiteralImages[110].length();
                     System.out.println("MAYOR_QUE -> " + image + "\n");
         break;
      case 111 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[111]);
        lengthOfMatch = jjstrLiteralImages[111].length();
                        System.out.println("MENOR_IGUAL -> " + image + "\n");
         break;
      case 112 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[112]);
        lengthOfMatch = jjstrLiteralImages[112].length();
                        System.out.println("MAYOR_IGUAL -> " + image + "\n");
         break;
      case 113 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[113]);
        lengthOfMatch = jjstrLiteralImages[113].length();
                    System.out.println("NEGACION -> " + image + "\n");
         break;
      case 114 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[114]);
        lengthOfMatch = jjstrLiteralImages[114].length();
               System.out.println("OR -> " + image + "\n");
         break;
      case 115 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[115]);
        lengthOfMatch = jjstrLiteralImages[115].length();
               System.out.println("XOR -> " + image + "\n");
         break;
      case 116 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[116]);
        lengthOfMatch = jjstrLiteralImages[116].length();
               System.out.println("AND -> " + image + "\n");
         break;
      case 117 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[117]);
        lengthOfMatch = jjstrLiteralImages[117].length();
                       System.out.println("SUMA_LOGICA -> " + image + "\n");
         break;
      case 118 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[118]);
        lengthOfMatch = jjstrLiteralImages[118].length();
                       System.out.println("AND_LOGICA -> " + image + "\n");
         break;
      case 119 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[119]);
        lengthOfMatch = jjstrLiteralImages[119].length();
                               System.out.println("DESPLAZAMIENTO_IZQ -> " + image + "\n");
         break;
      case 120 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[120]);
        lengthOfMatch = jjstrLiteralImages[120].length();
                               System.out.println("DESPLAZAMIENTO_DER -> " + image + "\n");
         break;
      case 121 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                          System.out.println("ID -> " + image + "\n");
         break;
      case 122 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("NUMBER -> " + image + "\n");
         break;
      case 123 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                              System.out.println("CADENA_TEXTO -> " + image + "\n");
         break;
      default : 
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
